# ==============================================================================
# CKLab v1.4.2 — Exact Hodge primitives + NL + cycle mapping + calibrated lattice
# Middle (p=n/2) H^{p,p} for smooth hypersurfaces; cubic fourfolds polished.
# Exact arithmetic over QQ / number fields. No floating point claims accepted.
# ==============================================================================

from sage.all import *
import random

# Deterministic runs (reproducibility) — use Python ints to avoid Sage Integer in random.seed
random.seed(int(0))
set_random_seed(int(0))

# --------------------------
# Jacobian ring core
# --------------------------

def _monomial_basis(R, deg):
    return list(R.monomials_of_degree(deg))

def _nf_poly(I, poly):
    try:
        return I.normal_form(poly)
    except Exception:
        GB = I.groebner_basis()
        return poly.reduce(GB)

def _poly_to_vec(poly, mons, mon_index):
    v = vector(QQ, len(mons))
    if poly == 0:
        return v
    for a in poly.monomials():
        idx = mon_index[a]
        v[idx] += poly.coefficient(a)
    return v

class HypersurfaceJacobian:
    """
    Smooth hypersurface X={f=0} ⊂ P^{n+1} of degree d over QQ.
    Exact: graded bases of S=R/J, residue pairing, primitive projectors, NL rank.
    """
    def __init__(self, n, d, f=None, names=None, order='degrevlex'):
        self.n = int(n)
        self.d = int(d)
        N = self.n + 2
        if names is None:
            names = [f'x{i}' for i in range(N)]
        self.R = PolynomialRing(QQ, N, order=order, names=names)
        self.xs = self.R.gens()
        self.f = sum(x**d for x in self.xs) if f is None else self.R(f)
        self.J = self.R.ideal([self.f.derivative(x) for x in self.xs])
        self._deg_cache = {}
        self._socle_deg = (self.n + 2) * (self.d - 2)
        self._intersection_scale = None  # to calibrate primitive intersection

    @property
    def socle_degree(self):
        return self._socle_deg

    def graded_basis(self, deg):
        if deg in self._deg_cache:
            return self._deg_cache[deg]
        R, J = self.R, self.J
        mons = _monomial_basis(R, deg)
        mon_index = {m:i for i,m in enumerate(mons)}
        cols, NF_polys = [], []
        for m in mons:
            q = _nf_poly(J, m)
            NF_polys.append(q)
            cols.append(_poly_to_vec(q, mons, mon_index))
        M = matrix(QQ, cols).transpose()
        E = M.echelon_form()
        piv = E.pivots()
        if len(piv) == 0:
            basis_mat = matrix(QQ, len(mons), 0)
            basis_polys, dim = [], 0
        else:
            basis_mat = M[:, piv]
            basis_polys = [NF_polys[j] for j in piv]
            dim = len(piv)
        data = {
            'mons': mons, 'mon_index': mon_index,
            'basis_mat': basis_mat, 'basis_polys': basis_polys, 'dim': dim
        }
        self._deg_cache[deg] = data
        return data

    def coords_in_deg(self, deg, poly):
        data = self.graded_basis(deg)
        dim = data['dim']
        if dim == 0:
            return vector(QQ, 0)
        mons = data['mons']
        mon_index = data['mon_index']
        B = data['basis_mat']
        v = _poly_to_vec(_nf_poly(self.J, poly), mons, mon_index)
        x = B.solve_right(v)
        return x

    def multiplication_matrix(self, deg_from, g, check=True):
        g = self.R(g); t = g.total_degree()
        data_from = self.graded_basis(deg_from)
        data_to   = self.graded_basis(deg_from + t)
        m_from = data_from['dim']; m_to = data_to['dim']
        if m_from == 0 or m_to == 0:
            return matrix(QQ, m_to, m_from)
        cols = []
        for b in data_from['basis_polys']:
            q = _nf_poly(self.J, b * g)
            x_to = self.coords_in_deg(deg_from + t, q)
            cols.append(x_to)
        M = matrix(QQ, cols).transpose()
        if check:
            for _ in range(2):
                coeffs = [QQ(random.randint(-2,2)) for _ in range(m_from)]
                comb = sum(coeffs[j]*data_from['basis_polys'][j] for j in range(m_from))
                lhs = self.coords_in_deg(deg_from + t, _nf_poly(self.J, comb * g))
                rhs = M * vector(QQ, coeffs)
                if lhs != rhs:
                    raise ValueError("Multiplication matrix consistency failed.")
        return M

    # Griffiths index m=(p+1)d-(n+2)
    def griffiths_m(self, p):
        m = (p+1)*self.d - (self.n + 2)
        return m if m >= 0 else -1

    # Residue pairing S_m × S_{s-m} → S_s ≅ Q (up to choice of S_s generator)
    def residue_pairing(self, m):
        s = self.socle_degree
        Bm = self.graded_basis(m); Bn = self.graded_basis(s - m); Bs = self.graded_basis(s)
        if Bs['dim'] != 1:
            raise ValueError("S_s must be 1-dimensional.")
        def phi(poly_s): return self.coords_in_deg(s, poly_s)[0]
        G = matrix(QQ, Bm['dim'], Bn['dim'])
        for i, a in enumerate(Bm['basis_polys']):
            for j, b in enumerate(Bn['basis_polys']):
                G[i,j] = phi(_nf_poly(self.J, a*b))
        return G, phi

    # Middle projectors (even n)
    def mid_even_projectors(self):
        if self.n % 2 != 0:
            raise ValueError("Middle-degree projector only for even n.")
        mid = self.n//2
        m = self.griffiths_m(mid)
        dim_prim = self.graded_basis(m)['dim'] if m >= 0 else 0
        total_dim = 1 + dim_prim
        P_lef = matrix(QQ, total_dim, total_dim, 0); P_lef[0,0] = 1
        P_prim = matrix(QQ, total_dim, total_dim, 0)
        if dim_prim > 0: P_prim[1:,1:] = matrix.identity(QQ, dim_prim)
        labels = [f'h^{mid}'] + [f'v{j}' for j in range(dim_prim)]
        return {'basis': labels, 'P_lef': P_lef, 'P_prim': P_prim, 'dims': (1, dim_prim)}

    # Infinitesimal NL rank for the middle piece (default p=n/2)
    def nl_tangent_codim(self, v_coords=None, p=None):
        if self.n % 2 != 0:
            raise ValueError("Defined for middle piece (n even).")
        mid = self.n//2
        if p is None: p = mid
        m = self.griffiths_m(p)
        if m < 0: return 0
        D = self.graded_basis(self.d)['dim']; T = self.graded_basis(m + self.d)['dim']
        if D == 0 or T == 0: return 0
        if v_coords is None:
            basis_m = self.graded_basis(m)['basis_polys']
            if len(basis_m) == 0: return 0
            v_poly = basis_m[0]
        else:
            basis_m = self.graded_basis(m)['basis_polys']
            v_poly = sum(v_coords[i]*basis_m[i] for i in range(len(basis_m)))
        basis_d = self.graded_basis(self.d)['basis_polys']
        cols = []
        for g in basis_d:
            q = _nf_poly(self.J, v_poly * g)
            x_to = self.coords_in_deg(m + self.d, q)
            cols.append(x_to)
        M = matrix(QQ, cols).transpose()
        return M.rank()

# --------------------------
# Thom–Porteous (kept for completeness)
# --------------------------

def total_chern_bundle(line_degs, h, sign=+1):
    c = 1
    for a in line_degs:
        c *= (1 + sign*QQ(a)*h)
    return c

def thom_porteous_rank_leq_r_class(E_degs, F_degs, r, N):
    R = PolynomialRing(QQ, 'h'); h = R.gen()
    e = len(E_degs); f = len(F_degs)
    cFE = total_chern_bundle(F_degs, h, +1) / total_chern_bundle(E_degs, h, +1)
    cFE_series = R(cFE).truncate(N+1)
    c = [QQ(0)]*(N+1)
    lst = cFE_series.list()
    for k in range(0, N+1):
        c[k] = lst[k] if k < len(lst) else QQ(0)
    rows = f - r; cols = e - r
    if rows <= 0 or cols <= 0:
        return R(1)
    M = matrix(R, rows, cols)
    for i in range(rows):
        for j in range(cols):
            idx = (j - i) + r
            M[i,j] = c[idx] if (0 <= idx <= N) else R(0)
    det = R(M.det()).truncate(N+1)
    return det

def restrict_class_to_hypersurface(class_in_PN, N, dX):
    R = PolynomialRing(QQ, 'h'); h = R.gen()
    return R(class_in_PN).truncate(N)  # dim(X)=N-1

# --------------------------
# Fermat cubic helpers (planes → S3)
# --------------------------

def is_fermat_cubic_fourfold(H):
    R = H.R
    xs = H.xs
    f0 = sum(x**H.d for x in xs)
    return R(H.f) == f0 and (H.n == 4 and H.d == 3)

def s3_basis_info(H):
    B = H.graded_basis(3)
    basis = B['basis_polys']
    supports = []
    for m in basis:
        if len(m.monomials()) != 1:
            raise ValueError("Non-monomial basis element found; use Fermat/diagonal basis.")
        mono = m.monomials()[0]
        exps = mono.exponents()[0]
        supp = tuple([i for i,e in enumerate(exps) if e == 1])
        if len(supp) != 3:
            raise ValueError("Expected squarefree degree-3 monomial.")
        supports.append(supp)
    index_by_support = {supp:i for i,supp in enumerate(supports)}
    return basis, supports, index_by_support

def perfect_matchings_6():
    def rec(S):
        if not S:
            return [()]
        a = min(S)
        res = []
        for b in sorted(S - {a}):
            for pm in rec(S - {a, b}):
                res.append(((a,b),) + pm)
        return res
    return rec(set(range(6)))

def fermat_plane_vectors_in_S3_all_pairings(H):
    if not is_fermat_cubic_fourfold(H):
        raise NotImplementedError("This generator is for the Fermat cubic fourfold.")
    K = CyclotomicField(6)
    z6 = K.gen()
    roots = [K(-1), z6, z6**5]  # z^3 = -1
    basis, supports, _ = s3_basis_info(H)
    planes = []
    for matching in perfect_matchings_6():
        for z1 in roots:
            for z2 in roots:
                for z3 in roots:
                    z_by_index = {}
                    (a1,b1),(a2,b2),(a3,b3) = matching
                    z_by_index[b1] = z1
                    z_by_index[b2] = z2
                    z_by_index[b3] = z3
                    coeffs = [K(0)]*len(supports)
                    for idx, T in enumerate(supports):
                        c = K(1)
                        for t in T:
                            if t in z_by_index:
                                c *= z_by_index[t]
                        coeffs[idx] = c
                    vK = vector(K, coeffs)
                    label = f"Plane{matching}(z={z1},{z2},{z3})"
                    planes.append({'vecK': vK, 'label': label, 'matching': matching, 'z': (z1,z2,z3), 'h_mid': QQ(1)/QQ(3)})
    return planes

def fermat_plane_ideal_from_matching_Q(H, matching, z_tuple):
    """
    Return a QQ-ideal of a Fermat plane if z_i ∈ QQ (e.g., all z_i = -1).
    Plane: x_{a_i} = z_i x_{b_i} ⇒ linear forms x_{a_i} - z_i x_{b_i} = 0.
    """
    z1, z2, z3 = z_tuple
    if any(zi not in QQ for zi in (z1,z2,z3)):
        raise ValueError("Non-rational z provided; cannot build QQ ideal.")
    (a1,b1),(a2,b2),(a3,b3) = matching
    R = H.R; xs = H.xs
    Ls = [xs[a1] - QQ(z1)*xs[b1],
          xs[a2] - QQ(z2)*xs[b2],
          xs[a3] - QQ(z3)*xs[b3]]
    return R.ideal(Ls)

def fermat_plane_vectors_all_405(H):
    """
    Return all 405 Fermat planes over K=Q(zeta_6), with h_mid = 1/3 each (no dedup).
    """
    assert is_fermat_cubic_fourfold(H)
    K = CyclotomicField(6)
    z6 = K.gen()
    roots = [K(-1), z6, z6**5]
    basis, supports, _ = s3_basis_info(H)
    allPlanes = []
    for matching in perfect_matchings_6():  # 15 matchings
        for z1 in roots:
            for z2 in roots:
                for z3 in roots:
                    z_by_index = {}
                    (a1,b1),(a2,b2),(a3,b3) = matching
                    z_by_index[b1] = z1
                    z_by_index[b2] = z2
                    z_by_index[b3] = z3
                    coeffs = [K(0)]*len(supports)
                    for idx, T in enumerate(supports):
                        c = K(1)
                        for t in T:
                            if t in z_by_index:
                                c *= z_by_index[t]
                        coeffs[idx] = c
                    vK = vector(K, coeffs)
                    label = f"Plane{matching}(z={z1},{z2},{z3})"
                    allPlanes.append({'vecK': vK, 'label': label, 'matching': matching, 'z': (z1,z2,z3), 'h_mid': QQ(1)/QQ(3)})
    assert len(allPlanes) == 405
    return allPlanes

def _hash_key_from_K_vector(v, K):
    """
    Build a hashable key for a vector over number field K by expanding to QQ.
    """
    if K is QQ:
        return tuple((QQ(x).numerator(), QQ(x).denominator()) for x in v)
    deg = K.absolute_degree()
    rows = []
    for x in v:
        cx = list(K(x).vector())
        cx += [QQ(0)]*(deg - len(cx))
        rows.append(tuple((ci.numerator(), ci.denominator()) for ci in cx))
    return tuple(rows)

def dedup_projective_K_vectors(candidates):
    """
    Deduplicate candidate vectors up to projective scaling over base field.
    """
    if not candidates:
        return []
    seen = set()
    uniq = []
    for c in candidates:
        v = list(c['vecK'])
        idx = next((i for i, val in enumerate(v) if val != 0), None)
        if idx is None:
            continue
        lam = v[idx]
        K = c['vecK'].base_ring()
        # Normalize and hash
        v_norm = [vi/lam for vi in v]
        key = _hash_key_from_K_vector(v_norm, K if hasattr(K, 'absolute_degree') else QQ)
        if key in seen:
            continue
        seen.add(key)
        uniq.append(c)
    return uniq

# --------------------------
# Generic subvarieties: ideal → primitive vector in S_m (middle degree only)
# --------------------------

def ideal_degree_k_basis(R, I, k):
    """
    Return a QQ-basis of the degree-k piece I_k of the homogeneous ideal I ⊂ R.
    Construct from generator multiples, row-reduce on monomial coefficient vectors.
    """
    mons_k = list(R.monomials_of_degree(k))
    mon_index = {m:i for i,m in enumerate(mons_k)}
    gens = [R(g) for g in I.gens()]
    rows = []
    for g in gens:
        dg = g.total_degree()
        if dg > k:
            continue
        for m in R.monomials_of_degree(k - dg):
            p = (m*g)
            coeffs = [QQ(0)]*len(mons_k)
            for mon in p.monomials():
                if mon.total_degree() == k and mon in mon_index:
                    coeffs[mon_index[mon]] += p.monomial_coefficient(mon)
            rows.append(vector(QQ, coeffs))
    if not rows:
        return []
    M = matrix(QQ, rows).echelon_form()
    basis_rows = [M.row(i) for i in range(M.nrows()) if any(M.row(i))]
    basis_polys = [sum(row[j]*mons_k[j] for j in range(len(mons_k))) for row in basis_rows]
    return [R(bp) for bp in basis_polys]

def primitive_vector_from_ideal(H, I, p=None, degree=None):
    """
    Given an ideal I for a subvariety Z ⊂ P^{n+1} contained in X, compute a primitive vector v ∈ S_m.
    Middle piece by default (p = n/2); m = (p+1)d - (n+2). Implemented for middle degree m = s - m only.
    Uses U = image(I_m -> S_m), then Ann(U) via residue pairing; expects dim ker = 1.
    """
    if p is None:
        if H.n % 2 != 0:
            raise ValueError("Default p=n/2 requires even n.")
        p = H.n//2
    m = H.griffiths_m(p) if degree is None else degree
    if m < 0:
        raise ValueError("Griffiths index m < 0 for given p; no primitive piece.")
    # Only implemented for middle degree (m = s - m)
    if H.socle_degree - m != m:
        raise NotImplementedError("Ann(U)→S_m implemented for middle degree m = s - m only.")
    R = H.R
    basis_deg = ideal_degree_k_basis(R, I, m)
    if not basis_deg:
        raise ValueError(f"I has no degree-{m} forms.")
    coords = []
    for q in basis_deg:
        v = H.coords_in_deg(m, q)
        if len(v) != 0:
            coords.append(v)
    if not coords:
        raise ValueError("Degree-m image in S_m is trivial.")
    Ucoords = matrix(QQ, coords).echelon_form()
    rows = [Ucoords.row(i) for i in range(Ucoords.nrows()) if any(Ucoords.row(i))]
    Ucoords = matrix(QQ, rows) if rows else matrix(QQ, 0, H.graded_basis(m)['dim'])
    G, _ = H.residue_pairing(m)
    # Ann(U): right kernel of (U * G) in QQ^dim(S_m)
    Kmat = Ucoords * G
    ker = Kmat.right_kernel()
    if ker.dimension() != 1:
        raise ValueError(f"Ann(U) kernel dimension {ker.dimension()} != 1; unexpected for this Z.")
    v_coords = vector(QQ, ker.basis()[0])
    den = lcm([c.denominator() for c in v_coords if c != 0]) if any(c != 0 for c in v_coords) else 1
    v_coords = vector(QQ, [c*den for c in v_coords])
    basis_polys = H.graded_basis(m)['basis_polys']
    v_poly = sum(v_coords[i]*basis_polys[i] for i in range(len(basis_polys)))
    return v_coords, v_poly, m

# --------------------------
# Full H^{m,m} vectors: Lefschetz h^m + primitive (general even n)
# --------------------------

def projective_degree_from_ideal(R, I):
    """
    Degree of the projective variety defined by homogeneous ideal I ⊂ R.
    Uses the Hilbert polynomial of R/I: for dim s, leading term (deg/s!) t^s.
    """
    S = R.quotient(I)
    HP = S.hilbert_polynomial()
    s = HP.degree()
    degZ = factorial(s) * HP.leading_coefficient()
    return QQ(degZ)

def full_middle_hpp_vector(H, I):
    """
    For a subvariety Z ⊂ X of dimension n/2 (n even):
      - Lefschetz coefficient c = deg(Z) / ∫_X h^n = deg(Z) / d,
      - primitive vector v ∈ S_m with m=(n/2+1)d-(n+2).
    Returns dict {'h_mid': c, 'vecK': QQ^dim(S_m)}.
    """
    if H.n % 2 != 0:
        raise ValueError("Middle piece available only for even n.")
    R = H.R
    degZ = projective_degree_from_ideal(R, I)
    c = degZ / QQ(H.d)  # since ∫_X h^n = deg(X) = d
    v_coords, _, _ = primitive_vector_from_ideal(H, I, p=H.n//2)
    return {'h_mid': c, 'vecK': vector(QQ, v_coords)}

# --------------------------
# Mapping and exact rational solves (primitive + full H^{m,m})
# --------------------------

def primitive_poly_to_cohomology_vector(prim_poly, H, p=None):
    if p is None:
        if H.n % 2 != 0:
            raise ValueError("Default p=n/2 requires even n.")
        p = H.n//2
    m = H.griffiths_m(p)
    return H.coords_in_deg(m, prim_poly)

def compute_candidate_span_rank(candidates):
    if len(candidates) == 0:
        return 0, 0, 0
    K = candidates[0]['vecK'].base_ring()
    m = len(candidates[0]['vecK'])
    N = len(candidates)
    MK = matrix(K, m, N)
    for j, c in enumerate(candidates):
        MK.set_column(j, c['vecK'])
    return MK.rank(), m, N

def q_rank_from_K_vectors(candidates):
    if not candidates:
        return 0
    K = candidates[0]['vecK'].base_ring()
    try:
        deg = K.absolute_degree()
    except Exception:
        deg = 1
    m = len(candidates[0]['vecK']); N = len(candidates)
    M = matrix(QQ, deg*m, N)
    for j, cd in enumerate(candidates):
        vK = cd['vecK']
        for i in range(m):
            x = K(vK[i])
            coeffs = list(x.vector()) if deg > 1 else [QQ(x)]
            coeffs += [QQ(0)]*(deg - len(coeffs))
            for bidx in range(deg):
                row = bidx*m + i
                M[row, j] = coeffs[bidx]
    return M.rank()

def rational_solve_over_K_basis(alpha_Q, candidate_dicts):
    """
    Solve sum_j c_j v_j = alpha in K^m with c_j ∈ QQ exactly, by expanding K in a QQ-basis.
    Works whether K is QQ (deg=1) or a number field.
    """
    if len(candidate_dicts) == 0:
        return None
    K = candidate_dicts[0]['vecK'].base_ring()
    try:
        deg = K.absolute_degree()
    except Exception:
        deg = 1
    m = len(alpha_Q)
    N = len(candidate_dicts)
    rows = deg * m
    M = matrix(QQ, rows, N)
    b = vector(QQ, rows)
    for i in range(m):
        b[i] = QQ(alpha_Q[i])
    def coeffs_in_basis(x):
        try:
            return list(x.vector())
        except Exception:
            return [QQ(x)]
    for j, cd in enumerate(candidate_dicts):
        col = [QQ(0)] * rows
        vK = cd['vecK']
        for i in range(m):
            x = K(vK[i])
            coeffs = coeffs_in_basis(x)
            if len(coeffs) < deg:
                coeffs += [QQ(0)]*(deg - len(coeffs))
            for bidx in range(deg):
                row = bidx*m + i
                col[row] = QQ(coeffs[bidx])
        M.set_column(j, vector(QQ, col))
    try:
        c = M.solve_right(b)
    except Exception:
        return None
    return {j: c[j] for j in range(N) if c[j] != 0}

def rational_solve_full_middle(alpha_full, candidate_fulls):
    """
    Full middle H^{m,m} solve: vectors are (h_mid; primitive S_m).
    alpha_full = {'h_mid': c_alpha (QQ), 'vecK': primitive vector over base field K}
    candidate_fulls = list of dicts with keys:
        'h_mid' (QQ, Lefschetz coefficient) and 'vecK' (K^dim primitive vector)
    Solve sum_j c_j * [h_j; v_j] = [h_alpha; v_alpha], with c_j ∈ QQ.
    """
    if len(candidate_fulls) == 0:
        return None
    K = candidate_fulls[0]['vecK'].base_ring()
    try:
        deg = K.absolute_degree()
    except Exception:
        deg = 1
    m_prim = len(candidate_fulls[0]['vecK'])
    m_full = 1 + m_prim
    rows = deg * m_full
    N = len(candidate_fulls)
    M = matrix(QQ, rows, N)
    b = vector(QQ, rows)
    def coeffs_in_basis(x):
        try:
            return list(x.vector())
        except Exception:
            return [QQ(x)]
    c_alpha = QQ(alpha_full.get('h_mid', 0))
    v_alpha = alpha_full.get('vecK', vector(QQ, m_prim))
    coeffs_h = coeffs_in_basis(K(c_alpha))
    if len(coeffs_h) < deg:
        coeffs_h += [QQ(0)]*(deg - len(coeffs_h))
    for bidx in range(deg):
        b[bidx*m_full + 0] = QQ(coeffs_h[bidx])
    for i in range(1, m_full):
        x = K(v_alpha[i-1]) if i-1 < len(v_alpha) else K(0)
        coeffs = coeffs_in_basis(x)
        if len(coeffs) < deg:
            coeffs += [QQ(0)]*(deg - len(coeffs))
        for bidx in range(deg):
            b[bidx*m_full + i] = QQ(coeffs[bidx])
    for j, cd in enumerate(candidate_fulls):
        col = [QQ(0)] * rows
        cj = QQ(cd.get('h_mid', 0))
        coeffs_hj = coeffs_in_basis(K(cj))
        if len(coeffs_hj) < deg:
            coeffs_hj += [QQ(0)]*(deg - len(coeffs_hj))
        for bidx in range(deg):
            col[bidx*m_full + 0] = QQ(coeffs_hj[bidx])
        vj = cd['vecK']
        for i in range(1, m_full):
            x = K(vj[i-1])
            coeffs = coeffs_in_basis(x)
            if len(coeffs) < deg:
                coeffs += [QQ(0)]*(deg - len(coeffs))
            for bidx in range(deg):
                col[bidx*m_full + i] = QQ(coeffs[bidx])
        M.set_column(j, vector(QQ, col))
    try:
        c = M.solve_right(b)
    except Exception:
        return None
    return {j: c[j] for j in range(N) if c[j] != 0}

# --------------------------
# Construction helpers for special cubics (plant surfaces)
# --------------------------

def is_projectively_smooth(f):
    """
    Check smoothness of {f=0} ⊂ P^N: singular locus is {f=0, ∂f=0}; test empty by saturation.
    """
    R = f.parent(); xs = R.gens()
    I = R.ideal([f] + [f.derivative(x) for x in xs])
    S = I.saturation(R.ideal(xs))
    return S == R.ideal(1)

def random_linear_forms(R, count=3, maxc=5):
    xs = R.gens()
    while True:
        mats, Ls = [], []
        for _ in range(count):
            coeffs = [QQ(random.randint(-maxc, maxc)) for _ in xs]
            if all(c == 0 for c in coeffs):
                coeffs[0] = 1
            L = sum(coeffs[i]*xs[i] for i in range(len(xs)))
            Ls.append(L); mats.append(coeffs)
        if matrix(QQ, mats).rank() == count:
            return Ls

def random_quadrics(R, count=3, maxc=3):
    mons2 = list(R.monomials_of_degree(2))
    Qs = []
    for _ in range(count):
        coeffs = [QQ(random.randint(-maxc, maxc)) for _ in mons2]
        if all(c == 0 for c in coeffs):
            coeffs[0] = 1
        Qs.append(sum(coeffs[i]*mons2[i] for i in range(len(mons2))))
    return Qs

def explicit_cubic_with_plane():
    """
    Deterministic smooth cubic X ⊂ P^5 containing the plane P={x0=x1=x2=0}.
    f = x0*(x3^2 + x4*x5) + x1*(x4^2 + x3*x5) + x2*(x5^2 + x3*x4).
    """
    R = PolynomialRing(QQ, 6, 'x')
    x0,x1,x2,x3,x4,x5 = R.gens()
    f = x0*(x3**2 + x4*x5) + x1*(x4**2 + x3*x5) + x2*(x5**2 + x3*x4)
    if not is_projectively_smooth(f):
        raise RuntimeError("Explicit cubic-with-plane is unexpectedly singular.")
    H = HypersurfaceJacobian(n=4, d=3, f=f)
    Ls = [x0, x1, x2]  # plane ideal (x0,x1,x2)
    return H, Ls

def cubic_with_plane(max_tries=50):
    """
    Build a smooth cubic fourfold containing a random plane P (given by 3 linear forms).
    f = Σ L_i Q_i ∈ (L1,L2,L3)_3 ensures P ⊂ X.
    """
    R = PolynomialRing(QQ, 6, 'x')
    for _ in range(max_tries):
        Ls = random_linear_forms(R, 3)
        Qs = random_quadrics(R, 3)
        f = sum(Ls[i]*Qs[i] for i in range(3))
        if not is_projectively_smooth(f):
            continue
        H = HypersurfaceJacobian(n=4, d=3, f=f)
        Iplane = R.ideal([R(L) for L in Ls])
        if not R(f).reduce(Iplane.groebner_basis()) == 0:
            continue
        return H, Ls
    raise RuntimeError("Failed to build a smooth cubic with a plane in given tries.")

def cubic_with_plane_fast(max_tries=30, fallback_random=True):
    """
    Prefer a deterministic known-smooth example; optionally fall back to random search.
    """
    try:
        return explicit_cubic_with_plane()
    except Exception:
        if not fallback_random:
            raise
    return cubic_with_plane(max_tries=max_tries)

def degree3_coord_matrix(R, polys):
    mons3 = list(R.monomials_of_degree(3))
    mon_index = {m:i for i,m in enumerate(mons3)}
    rows = []
    for p in polys:
        p = R(p)
        coeffs = [QQ(0)]*len(mons3)
        for mon in p.monomials():
            if mon.total_degree() == 3 and mon in mon_index:
                coeffs[mon_index[mon]] += p.monomial_coefficient(mon)
        rows.append(vector(QQ, coeffs))
    return matrix(QQ, rows), mons3

def cubic_with_two_planes(max_tries=120):
    """
    Build a smooth cubic fourfold containing two distinct planes P1, P2.
    Choose f ∈ (I1)_3 ∩ (I2)_3 by intersecting the degree-3 subspaces.
    """
    R = PolynomialRing(QQ, 6, 'x')
    for _ in range(max_tries):
        Ls1 = random_linear_forms(R, 3)
        Ls2 = random_linear_forms(R, 3)
        I1 = R.ideal([R(L) for L in Ls1])
        I2 = R.ideal([R(L) for L in Ls2])
        B1 = ideal_degree_k_basis(R, I1, 3)
        B2 = ideal_degree_k_basis(R, I2, 3)
        if not B1 or not B2:
            continue
        M1, mons3 = degree3_coord_matrix(R, B1)
        M2, _ = degree3_coord_matrix(R, B2)
        U1 = M1.row_space(); U2 = M2.row_space()
        W = U1.intersection(U2)
        if W.dimension() == 0:
            continue
        basisW = W.basis()
        w = sum((QQ(random.randint(-2,2))*b for b in basisW), basisW[0]*0)
        if all(ci == 0 for ci in w):
            w = basisW[0]
        f = sum(w[i]*mons3[i] for i in range(len(mons3)))
        if not is_projectively_smooth(f):
            continue
        H = HypersurfaceJacobian(n=4, d=3, f=f)
        if not R(f).reduce(I1.groebner_basis()) == 0:
            continue
        if not R(f).reduce(I2.groebner_basis()) == 0:
            continue
        return H, Ls1, Ls2
    raise RuntimeError("Failed to build a smooth cubic with two planes in given tries.")

def random_smooth_hypersurface(n, d, max_tries=200, density=0.15, coeff_max=3):
    """
    Random smooth hypersurface X={f=0} ⊂ P^{n+1}.
    """
    R = PolynomialRing(QQ, n+2, 'x'); xs = R.gens()
    mons = list(R.monomials_of_degree(d))
    cubes = {x**d for x in xs}
    for _ in range(max_tries):
        coeffs = []
        for m in mons:
            if random.random() < density or m in cubes:
                coeffs.append(QQ(random.randint(-coeff_max, coeff_max)))
            else:
                coeffs.append(QQ(0))
        if all(c == 0 for c in coeffs):
            continue
        f = sum(coeffs[i]*mons[i] for i in range(len(mons)))
        if is_projectively_smooth(f):
            return HypersurfaceJacobian(n=n, d=d, f=f)
    raise RuntimeError("Failed to generate a random smooth hypersurface; increase tries or density.")

# --------------------------
# Primitive intersection calibration and lattice/discriminants
# --------------------------

def calibrate_primitive_intersection_scale_with_plane(H, I_plane):
    """
    For cubic fourfolds: calibrate the primitive intersection scale using a plane P.
    Requirement: ⟨P_prim, P_prim⟩ = 8/3 for P_prim = P - (1/3) h^2.
    """
    assert H.n == 4 and H.d == 3, "This calibration is specific to cubic fourfolds."
    v_coords, _, _ = primitive_vector_from_ideal(H, I_plane, p=H.n//2)
    G, _ = H.residue_pairing(3)
    t = (vector(QQ, v_coords) * G * vector(QQ, v_coords))  # QQ
    c = - (QQ(8)/QQ(3)) / t
    H._intersection_scale = c
    return c

def primitive_intersection(H, v_coords1, v_coords2, p=None):
    """
    Primitive intersection pairing on H^{p,p}_prim; requires calibration if you want
    absolute values. Without calibration, returns the pairing up to a global Q×.
    """
    if p is None:
        if H.n % 2 != 0:
            raise ValueError("Default p=n/2 requires even n.")
        p = H.n//2
    m = H.griffiths_m(p)
    G, _ = H.residue_pairing(m)
    s = getattr(H, '_intersection_scale', QQ(1))
    if H._intersection_scale is None:
        print("[warn] primitive intersection form is uncalibrated (using scale=1)")
    return (-s) * (vector(QQ, v_coords1) * G * vector(QQ, v_coords2))

def symmetric_signature_over_Q(M):
    """
    Certified signature over QQ if possible; RR fallback only for debugging.
    """
    try:
        # Clear denominators to ZZ
        denoms = [e.denominator() for e in M.list() if e != 0]
        D = lcm(denoms) if denoms else 1
        MZ = matrix(ZZ, [[D*M[i,j] for j in range(M.ncols())] for i in range(M.nrows())])
        from sage.quadratic_forms.quadratic_form import QuadraticForm
        q = QuadraticForm(ZZ, MZ)
        pos, neg = q.signature()
        zero = M.nrows() - pos - neg
        return (pos, neg, zero)
    except Exception:
        vals = M.change_ring(RR).eigenvalues()
        eps = 1e-20
        pos = sum(1 for x in vals if x > eps)
        neg = sum(1 for x in vals if x < -eps)
        zero = M.nrows() - pos - neg
        return (pos, neg, zero)

def compute_intersection_form_primitive(H, surface_ideals=None, validate_orthogonality=True):
    """
    Compute the (calibrated if available) intersection form on H^n_prim(X,Z) at middle degree.
    Returns a ZZ-matrix obtained by clearing denominators of the QQ Gram.
    """
    assert H.n % 2 == 0, "Middle primitive intersection only for even n."
    p = H.n//2
    m = H.griffiths_m(p)
    Bm = H.graded_basis(m)
    dim_prim = Bm['dim']
    print(f"Computing intersection form on {dim_prim}-dimensional primitive cohomology...")
    G, _ = H.residue_pairing(m)
    scale = getattr(H, '_intersection_scale', QQ(1))
    if H._intersection_scale is None:
        print("[warn] primitive form uncalibrated; Gram is correct up to Q×")
    intersection_matrix = (-scale) * G
    denoms = [entry.denominator() for entry in intersection_matrix.list() if entry != 0]
    lcm_denom = lcm(denoms) if denoms else 1
    MZ = matrix(ZZ, [[lcm_denom * intersection_matrix[i, j]
                      for j in range(dim_prim)]
                     for i in range(dim_prim)])
    if MZ != MZ.transpose():
        raise ValueError("Intersection matrix is not symmetric!")
    algebraic_classes = []
    if surface_ideals:
        print(f"Computing {len(surface_ideals)} algebraic middle-dimensional classes...")
        for i, I in enumerate(surface_ideals):
            try:
                v_coords, v_poly, _ = primitive_vector_from_ideal(H, I, p=p)
                if validate_orthogonality:
                    pass  # primitive by construction
                algebraic_classes.append({
                    'coords': v_coords, 'poly': v_poly, 'ideal': I, 'label': f'Z_{i}'
                })
                print(f"  Z_{i}: primitive vector computed")
            except Exception as e:
                print(f"  Z_{i}: failed to compute primitive vector - {e}")
    return {
        'intersection_matrix': MZ,
        'scaling_factor': lcm_denom,
        'basis_vectors': Bm['basis_polys'],
        'algebraic_classes': algebraic_classes,
        'dimension': dim_prim
    }

def discriminant_for_algebraic_class(H, full):
    """
    Compute the discriminant of the algebraic rank-2 lattice 〈h^m, S〉
    where S = c*h^m + v (v primitive).
    """
    assert H.n % 2 == 0
    m = H.n//2
    # Pairings
    h_h = QQ(H.d)  # ⟨h^m,h^m⟩ = ∫_X h^n = deg(X)=d
    v = vector(QQ, full['vecK'])
    vv = primitive_intersection(H, v, v, p=m)  # calibrated if available
    h_v = QQ(0)   # primitive orthogonal to Lefschetz
    c = QQ(full['h_mid'])
    # Gram for basis {h^m, S}
    hS = h_h * c + h_v
    SS = h_h * c*c + 2*c*h_v + vv
    Gram = matrix(QQ, [[h_h, hS],
                       [hS,  SS]])
    return ZZ(Gram.determinant()), Gram

# --------------------------
# Drivers and verifiers
# --------------------------

def try_express_hmid_via_candidates(candidates, H):
    """
    Attempt to express the pure Lefschetz class h^{n/2} as a QQ-combination of candidates.
    Each candidate dict has 'h_mid' (QQ) and 'vecK' (K^m).
    """
    if not candidates:
        return None
    K = candidates[0]['vecK'].base_ring()
    m_prim = len(candidates[0]['vecK'])
    alpha_full = {'h_mid': QQ(1), 'vecK': vector(K, [K(0)]*m_prim)}
    return rational_solve_full_middle(alpha_full, candidates)

def express_hmid_from_all_fermat_planes(H):
    """
    Express h^{n/2} as a Q-linear combination of all 405 plane classes on the Fermat cubic.
    By symmetry, the average of all 405 planes kills the primitive part and yields:
        h^2 = (1/135) * sum_{j=1}^{405} Plane_j.
    This function checks that the sum of primitive vectors is exactly zero over K
    and returns the explicit rational coefficients.
    """
    planes = fermat_plane_vectors_all_405(H)
    K = planes[0]['vecK'].base_ring()
    m = len(planes[0]['vecK'])
    v_sum = vector(K, [K(0)]*m)
    for cd in planes:
        v_sum += cd['vecK']
    if v_sum == 0:
        coeff = QQ(1)/QQ(135)
        print("Primitive sum over all 405 planes is 0, as expected.")
        print("h^2 = {} * sum_{j=1}^{} Plane_j (exact over Q).".format(coeff, len(planes)))
        return {j: coeff for j in range(len(planes))}
    else:
        # Safety fallback: exact linear solve using all 405 columns
        alpha_full = {'h_mid': QQ(1), 'vecK': vector(K, [K(0)]*m)}
        rel = rational_solve_full_middle(alpha_full, planes)
        if rel:
            print("[OK] Found exact rational coefficients expressing h^2 as sum of 405 planes (sparse, size={})".format(len(rel)))
            return rel
        else:
            print("[..] Unexpected: could not express h^2 even with all 405 planes.")
            return None

def verify_fermat_cubic_lattice():
    """
    Fermat cubic fourfold: calibrate using a rational plane (z_i=-1), compute ranks and primitive Gram.
    """
    print("FERMAT CUBIC FOURFOLD LATTICE VERIFICATION")
    print("-" * 50)
    H = HypersurfaceJacobian(n=4, d=3)  # Fermat cubic
    # Build a rational plane ideal for calibration: pick a matching and z=(-1,-1,-1)
    matching = perfect_matchings_6()[0]
    Iplane = fermat_plane_ideal_from_matching_Q(H, matching, (-1, -1, -1))
    calibrate_primitive_intersection_scale_with_plane(H, Iplane)
    # Primitive Gram (calibrated)
    prim = compute_intersection_form_primitive(H)
    # Generate deduped plane vectors over K and report spans
    planes = fermat_plane_vectors_in_S3_all_pairings(H)
    planes = dedup_projective_K_vectors(planes)
    rkK, m, N = compute_candidate_span_rank(planes)
    rkQ = q_rank_from_K_vectors(planes)
    print(f"Fermat planes: rank over K = {rkK}/{m}, Q-rank via stacking = {rkQ}, candidates={len(planes)}")
    return {'primitive': prim, 'rank_K': rkK, 'rank_Q': rkQ, 'num_candidates': len(planes)}

def verify_cubic_with_plane_lattice():
    """
    Deterministic cubic with a planted plane: calibrate via that plane; compute 2×2 discriminant (expect 8).
    """
    print("CUBIC WITH PLANE LATTICE VERIFICATION")
    print("-" * 50)
    H, plane_forms = cubic_with_plane_fast()
    plane_ideal = H.R.ideal([H.R(L) for L in plane_forms])
    # Calibrate primitive intersection
    calibrate_primitive_intersection_scale_with_plane(H, plane_ideal)
    # Primitive lattice
    prim = compute_intersection_form_primitive(H, surface_ideals=[plane_ideal])
    # Full class S = (deg/d)h^2 + v
    full = full_middle_hpp_vector(H, plane_ideal)
    d, Gram = discriminant_for_algebraic_class(H, full)
    print(f"Algebraic lattice 〈h^2, Plane〉 Gram =\n{Gram}\nDiscriminant = {d} (expect 8)")
    return {'primitive': prim, 'plane_lattice': Gram, 'discriminant': d, 'matches_hassett_plane': (d == 8)}

def test_primitive_hodge_conjecture(variety_type="fermat", max_prim=5, pairing_mode="all", test_nonprimitive=True):
    """
    variety_type options:
      - 'fermat': Fermat cubic fourfold; candidates = plane classes over K=Q(zeta_6), each with h^2 coeff = 1/3.
      - 'random_plane': random smooth cubic with a planted plane; candidates = {plane} with h^2 coeff = deg/d.
      - 'two_planes': random smooth cubic with two planted planes; candidates = both.
      - 'random_general': random smooth cubic (very general); candidates = [].
    """
    candidates = []
    if variety_type in ("fermat", "Fermat"):
        print("Initializing Fermat cubic fourfold Jacobian ring...")
        H = HypersurfaceJacobian(n=4, d=3)  # Fermat by default
        assert is_fermat_cubic_fourfold(H), "Expected Fermat cubic fourfold."
        # Calibrate using a rational Fermat plane
        Iplane = fermat_plane_ideal_from_matching_Q(H, perfect_matchings_6()[0], (-1, -1, -1))
        calibrate_primitive_intersection_scale_with_plane(H, Iplane)
        B = H.graded_basis(3)
        primitive_classes = B['basis_polys']
        print(f"S_3 dimension = {len(primitive_classes)} (expect 20).")
        candidates = fermat_plane_vectors_in_S3_all_pairings(H)
        if pairing_mode == "one":
            candidates = candidates[:27]
        candidates = dedup_projective_K_vectors(candidates)
    elif variety_type in ("random_plane", "plane"):
        print("Constructing random smooth cubic with a planted plane...")
        H, Ls = cubic_with_plane_fast()
        Iplane = H.R.ideal([H.R(L) for L in Ls])
        calibrate_primitive_intersection_scale_with_plane(H, Iplane)
        full = full_middle_hpp_vector(H, Iplane)
        candidates = [{'vecK': full['vecK'], 'label': 'PlantedPlane', 'h_mid': full['h_mid']}]
        B = H.graded_basis(3); primitive_classes = B['basis_polys']
        print(f"S_3 dimension = {len(primitive_classes)} (expect 20).")
    elif variety_type in ("two_planes", "2planes"):
        print("Constructing random smooth cubic with two planted planes...")
        H, Ls1, Ls2 = cubic_with_two_planes()
        I1 = H.R.ideal([H.R(L) for L in Ls1]); F1 = full_middle_hpp_vector(H, I1)
        I2 = H.R.ideal([H.R(L) for L in Ls2]); F2 = full_middle_hpp_vector(H, I2)
        calibrate_primitive_intersection_scale_with_plane(H, I1)  # either plane suffices
        candidates = [
            {'vecK': F1['vecK'], 'label': 'Plane1', 'h_mid': F1['h_mid']},
            {'vecK': F2['vecK'], 'label': 'Plane2', 'h_mid': F2['h_mid']},
        ]
        candidates = dedup_projective_K_vectors(candidates)
        B = H.graded_basis(3); primitive_classes = B['basis_polys']
        print(f"S_3 dimension = {len(primitive_classes)} (expect 20).")
    elif variety_type in ("random_general", "general_cubic", "random"):
        print("Constructing random smooth cubic...")
        H = random_smooth_hypersurface(n=4, d=3)
        B = H.graded_basis(3); primitive_classes = B['basis_polys']
        print(f"S_3 dimension = {len(primitive_classes)} (expect 20).")
        candidates = []
    else:
        raise NotImplementedError(f"Unknown variety_type: {variety_type}")

    # Report primitive span rank
    rank, m, N = compute_candidate_span_rank(candidates) if candidates else (0,0,0)
    if m > 0:
        print(f"Generated {len(candidates)} candidates; primitive-span rank over base field: {rank}/{m}")
        try:
            print(f"Q-span rank via Galois stacking: {q_rank_from_K_vectors(candidates)}")
        except Exception:
            pass
    else:
        print("Generated 0 candidates.")

    # Primitive tests
    successes = 0
    for i, prim_poly in enumerate(primitive_classes[:max_prim]):
        alpha_Q = primitive_poly_to_cohomology_vector(prim_poly, H)  # QQ^m
        relation = rational_solve_over_K_basis(alpha_Q, candidates)
        if relation:
            successes += 1
            terms = [f"({QQ(c)})*{candidates[j].get('label', f'C{j}')}" for j,c in relation.items()]
            print(f"[OK] Primitive basis element {i} expressed as:")
            print("     ", " + ".join(terms))
        else:
            print(f"[..] Primitive basis element {i}: no certified relation from current candidates.")
    print(f"Primitive summary: {successes}/{max_prim} basis vectors expressed via current candidates.")

    # Lefschetz test
    if test_nonprimitive:
        if variety_type in ("fermat","Fermat"):
            rel_all = express_hmid_from_all_fermat_planes(H)
            if rel_all:
                print("[OK] Lefschetz test (Fermat): h^2 expressed using all 405 planes.")
            else:
                print("[..] Lefschetz test (Fermat): failed even with all 405 planes.")
        else:
            for cd in candidates:
                if 'h_mid' not in cd:
                    cd['h_mid'] = QQ(0)
            rel_h = try_express_hmid_via_candidates(candidates, H)
            if rel_h:
                terms = [f"({QQ(c)})*{candidates[j].get('label', f'C{j}')}" for j,c in rel_h.items()]
                print("[OK] Lefschetz test: h^{n/2} expressed as a combination of candidates:")
                print("     ", " + ".join(terms))
            else:
                print("[..] Lefschetz test: could not express h^{n/2} from current candidates.")
    return True

def run_basic_tests():
    """
    Smoke + integration checks on the Jacobian ring mechanics and a short Fermat run.
    """
    import time
    t0 = time.time()
    print("=== CKLab basic integration tests ===")
    try:
        H = HypersurfaceJacobian(n=4, d=3)  # Fermat
        dim_S3 = H.graded_basis(3)['dim']
        dim_S6 = H.graded_basis(6)['dim']
        assert dim_S3 == 20 and dim_S6 == 1, f"Unexpected dims: S3={dim_S3}, S6={dim_S6}"
        P = H.mid_even_projectors()
        assert P['P_lef']*P['P_lef'] == P['P_lef']
        assert P['P_prim']*P['P_prim'] == P['P_prim']
        assert P['P_lef']*P['P_prim'] == 0
        codim = H.nl_tangent_codim()
        assert codim == 1
        print(f"[OK] Jacobian + projectors + NL: dim S3=20, dim S6=1, NL codim={codim}")
    except Exception as e:
        print("[FAIL] Jacobian/NL basic check:", e)
        return False
    try:
        # Fermat run with calibration via rational plane
        verify_fermat_cubic_lattice()
        test_primitive_hodge_conjecture(variety_type="fermat", max_prim=3, pairing_mode="all", test_nonprimitive=True)
    except Exception as e:
        print("[FAIL] test driver crashed:", e)
        return False
    dt = time.time() - t0
    print(f"=== Basic tests completed in {dt:.2f}s ===")
    return True

# ==============================================================================
# ENTRY POINT
# ==============================================================================

if __name__ == "__main__":
    print("Starting CKLab execution...")
    run_basic_tests()

    print("\n" + "="*50 + "\n")

    print("Fermat run (5 basis elements) + Lefschetz test:")
    test_primitive_hodge_conjecture(variety_type="fermat", max_prim=5, pairing_mode="all", test_nonprimitive=True)

    print("\n" + "="*50 + "\n")

    print("Random smooth cubic with a planted plane (expect NL rank ~1, disc=8):")
    verify_cubic_with_plane_lattice()
    test_primitive_hodge_conjecture(variety_type="random_plane", max_prim=10, test_nonprimitive=True)

    print("\n" + "="*50 + "\n")

    print("Random smooth cubic with two planted planes:")
    test_primitive_hodge_conjecture(variety_type="two_planes", max_prim=10, test_nonprimitive=True)

    print("\n" + "="*50 + "\n")

    print("Random smooth cubic (very general; typically no candidates):")
    test_primitive_hodge_conjecture(variety_type="random_general", max_prim=10, test_nonprimitive=True)

    print("\nExecution finished.")
